{"ast":null,"code":"var _jsxFileName = \"/home/primeminister/Documents/verimascent.github.io/RandomQuoteMachine/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { fetchQuotes, Quotes } from './API';\nimport { GlobalStyle, BodyWrapper } from './App.styles';\nimport QuotesCard from './components/QuotesCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [flip, setFlip] = useState(true);\n  const [quote, setQuote] = useState(new Quotes());\n  const [colors, setColors] = useState([[]]);\n  const [isFadeOut, setIsFadeOut] = useState(false);\n\n  const generateNewQuote = async () => {\n    // setTimeOut previousState fadeOut we should set isFadeOut \n    setLoading(true);\n    setFlip(!flip);\n    const newQuote = await fetchQuotes();\n    setQuote(newQuote);\n    setLoading(false);\n  };\n\n  const generateNewColor = () => {\n    let a = Math.floor(Math.random() * 256);\n    let b = Math.floor(Math.random() * 256);\n    let c = Math.floor(Math.random() * 256);\n    let color = `rgba(${a}, ${b}, ${c}, 1)`;\n    let colorOther = `rgba(${255 - a}, ${255 - b}, ${255 - c}, 1)`;\n    let newColor = [color, colorOther];\n    return newColor;\n  };\n\n  const handleClick = () => {\n    setIsFadeOut(true);\n    setTimeout(() => {\n      generateNewQuote();\n      setIsFadeOut(false);\n    }, 800);\n  }; // const newColor: string[] = generateNewColor();\n  // initialize the quote card\n\n\n  useEffect(() => {\n    // generateNewColor();\n    // generateNewQuote();\n    setColors(prev => {\n      const colorGenerate = generateNewColor();\n      const myColors = [];\n      myColors.push(colorGenerate);\n      const myPrev = [...prev];\n      const newColors = myColors.concat(myPrev);\n\n      if (newColors.length > 2) {\n        newColors.pop();\n      }\n\n      return newColors;\n    });\n  }, [flip]);\n  useEffect(() => {\n    // generateNewColor();\n    generateNewQuote(); // console.log(colors);\n  }, []); // useEffect(() => {\n  //   generateNewQuote();\n  //   generateNewColor();\n  // }\n  // , [flip]);\n  // make the quote change automatically\n  // useEffect(() => {\n  //   const timeQuote: NodeJS.Timeout = setInterval(() => {\n  //     generateNewQuote();\n  //   }, 100000);\n  //   // avoid that the timer becomes faster and faster, clear the time interval before\n  //   return () => clearInterval(timeQuote)\n  // });\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BodyWrapper, {\n      colorBody: colors,\n      children: /*#__PURE__*/_jsxDEV(QuotesCard, {\n        author: quote.author,\n        quote: quote.content,\n        callback: handleClick,\n        colors: colors,\n        isLoading: loading,\n        fade: isFadeOut\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"cp/UNoMvSv1JiRQVXcmhjYHFtOc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/primeminister/Documents/verimascent.github.io/RandomQuoteMachine/src/App.tsx"],"names":["React","useState","useEffect","fetchQuotes","Quotes","GlobalStyle","BodyWrapper","QuotesCard","App","loading","setLoading","flip","setFlip","quote","setQuote","colors","setColors","isFadeOut","setIsFadeOut","generateNewQuote","newQuote","generateNewColor","a","Math","floor","random","b","c","color","colorOther","newColor","handleClick","setTimeout","prev","colorGenerate","myColors","push","myPrev","newColors","concat","length","pop","author","content"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {fetchQuotes, Quotes} from './API';\nimport { GlobalStyle, BodyWrapper } from './App.styles';\nimport QuotesCard from './components/QuotesCard';\n\nconst App: React.FunctionComponent = () => {\n  const [loading, setLoading] = useState(false);\n  const [flip, setFlip] = useState(true);\n  const [quote, setQuote] = useState<Quotes>(new Quotes())\n  const [colors, setColors] = useState<Array<Array<string>>>([[]]);\n  const [isFadeOut, setIsFadeOut] = useState(false);\n\n  const generateNewQuote: () => Promise<void> = async() => {\n    // setTimeOut previousState fadeOut we should set isFadeOut \n    setLoading(true);\n    setFlip(!flip);\n    const newQuote = await fetchQuotes();   \n    setQuote(newQuote);\n    setLoading(false);\n  }\n\n  const generateNewColor: () => string[] = () => {\n    let a: number = Math.floor(Math.random() * 256);\n    let b: number = Math.floor(Math.random() * 256);\n    let c: number = Math.floor(Math.random() * 256);\n    let color: string = `rgba(${a}, ${b}, ${c}, 1)`;\n    let colorOther: string = `rgba(${255-a}, ${255-b}, ${255-c}, 1)`;\n    let newColor: string[] = [color, colorOther];\n    \n    return newColor;\n    \n    \n  }\n\n  const handleClick = () => {\n    setIsFadeOut(true);\n    setTimeout(() => {\n      generateNewQuote();\n      setIsFadeOut(false);\n    }, 800);\n    \n  }\n  // const newColor: string[] = generateNewColor();\n\n  \n  // initialize the quote card\n  \n  useEffect(() => {\n    // generateNewColor();\n    // generateNewQuote();\n    setColors(prev => {\n      const colorGenerate: string[] = generateNewColor();\n      const myColors: Array<Array<string>> = [];\n      myColors.push(colorGenerate);\n      const myPrev = [...prev];\n      const newColors: string[][] = myColors.concat(myPrev);\n      if (newColors.length > 2){\n        newColors.pop();\n      }\n      \n      return newColors;\n    });\n  }\n  , [flip]);\n\n  useEffect(() => {\n    // generateNewColor();\n    generateNewQuote();\n    // console.log(colors);\n  }\n  , []);\n\n  \n  // useEffect(() => {\n  //   generateNewQuote();\n  //   generateNewColor();\n  // }\n    \n  // , [flip]);\n\n  // make the quote change automatically\n  // useEffect(() => {\n  //   const timeQuote: NodeJS.Timeout = setInterval(() => {\n  //     generateNewQuote();\n  //   }, 100000);\n\n  //   // avoid that the timer becomes faster and faster, clear the time interval before\n  //   return () => clearInterval(timeQuote)\n  // });\n  return (\n    <>\n      <GlobalStyle /> \n        <BodyWrapper colorBody={colors}>\n          <QuotesCard\n            author={quote.author}\n            quote={quote.content}\n            callback={handleClick} \n            colors = {colors}\n            isLoading = {loading}\n            fade = {isFadeOut} />\n        </BodyWrapper>\n\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}